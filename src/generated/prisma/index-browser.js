
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AuditactionScalarFieldEnum = {
  action_id: 'action_id',
  description: 'description'
};

exports.Prisma.AuditlogScalarFieldEnum = {
  log_id: 'log_id',
  user_id: 'user_id',
  session_id: 'session_id',
  action_id: 'action_id',
  target_id: 'target_id',
  target_entity: 'target_entity',
  timestamp: 'timestamp'
};

exports.Prisma.BadgeScalarFieldEnum = {
  badge_id: 'badge_id',
  tour_id: 'tour_id',
  badge_title: 'badge_title',
  description: 'description',
  image_url: 'image_url'
};

exports.Prisma.CheckpointScalarFieldEnum = {
  checkpoint_id: 'checkpoint_id',
  quiz_id: 'quiz_id',
  location_id: 'location_id',
  points_reward: 'points_reward',
  created_at: 'created_at'
};

exports.Prisma.LocationScalarFieldEnum = {
  location_id: 'location_id',
  location_name: 'location_name',
  locationtype_id: 'locationtype_id',
  description: 'description',
  created_at: 'created_at'
};

exports.Prisma.LocationtypeScalarFieldEnum = {
  locationtype_id: 'locationtype_id',
  description: 'description'
};

exports.Prisma.PermissionScalarFieldEnum = {
  permission_id: 'permission_id',
  permission_name: 'permission_name',
  description: 'description'
};

exports.Prisma.QuestionScalarFieldEnum = {
  question_id: 'question_id',
  question: 'question',
  quiz_id: 'quiz_id'
};

exports.Prisma.QuestionoptionScalarFieldEnum = {
  option_id: 'option_id',
  option: 'option',
  is_correct: 'is_correct',
  question_id: 'question_id'
};

exports.Prisma.QuizScalarFieldEnum = {
  quiz_id: 'quiz_id',
  quiz_title: 'quiz_title',
  description: 'description'
};

exports.Prisma.ReviewScalarFieldEnum = {
  review_id: 'review_id',
  user_id: 'user_id',
  tour_id: 'tour_id',
  review_text: 'review_text',
  rating: 'rating',
  created_at: 'created_at'
};

exports.Prisma.RoleScalarFieldEnum = {
  role_id: 'role_id',
  role_name: 'role_name',
  description: 'description'
};

exports.Prisma.RolepermissionScalarFieldEnum = {
  role_id: 'role_id',
  permission_id: 'permission_id',
  created_at: 'created_at'
};

exports.Prisma.SessionsScalarFieldEnum = {
  session_id: 'session_id',
  user_id: 'user_id',
  access_token: 'access_token',
  is_active: 'is_active',
  login_at: 'login_at',
  logout_at: 'logout_at'
};

exports.Prisma.TourScalarFieldEnum = {
  tour_id: 'tour_id',
  tour_name: 'tour_name',
  description: 'description',
  created_at: 'created_at'
};

exports.Prisma.TourcheckpointScalarFieldEnum = {
  tour_id: 'tour_id',
  checkpoint_id: 'checkpoint_id',
  checkpoint_order: 'checkpoint_order'
};

exports.Prisma.UserbadgeScalarFieldEnum = {
  badge_id: 'badge_id',
  user_id: 'user_id',
  created_at: 'created_at'
};

exports.Prisma.UsercheckpointattemptScalarFieldEnum = {
  checkpointattempt_id: 'checkpointattempt_id',
  user_id: 'user_id',
  checkpoint_id: 'checkpoint_id',
  tourcompletion_id: 'tourcompletion_id',
  created_at: 'created_at'
};

exports.Prisma.UserprofileScalarFieldEnum = {
  profile_id: 'profile_id',
  user_id: 'user_id',
  points: 'points',
  level: 'level',
  first_name: 'first_name',
  last_name: 'last_name',
  school: 'school',
  sec_level: 'sec_level',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserquizcompletionScalarFieldEnum = {
  quizcompletion_id: 'quizcompletion_id',
  quiz_id: 'quiz_id',
  user_id: 'user_id',
  score: 'score',
  created_at: 'created_at'
};

exports.Prisma.UserroleScalarFieldEnum = {
  user_id: 'user_id',
  role_id: 'role_id',
  created_at: 'created_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  user_id: 'user_id',
  username: 'username',
  email: 'email',
  password: 'password',
  is_verified: 'is_verified',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UsertourcompletionScalarFieldEnum = {
  tourcompletion_id: 'tourcompletion_id',
  user_id: 'user_id',
  tour_id: 'tour_id',
  completed: 'completed',
  completed_at: 'completed_at',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.sec_level = exports.$Enums.sec_level = {
  Sec1: 'Sec1',
  Sec2: 'Sec2',
  Sec3: 'Sec3',
  Sec4: 'Sec4',
  Sec5: 'Sec5',
  Other: 'Other'
};

exports.Prisma.ModelName = {
  auditaction: 'auditaction',
  auditlog: 'auditlog',
  badge: 'badge',
  checkpoint: 'checkpoint',
  location: 'location',
  locationtype: 'locationtype',
  permission: 'permission',
  question: 'question',
  questionoption: 'questionoption',
  quiz: 'quiz',
  review: 'review',
  role: 'role',
  rolepermission: 'rolepermission',
  sessions: 'sessions',
  tour: 'tour',
  tourcheckpoint: 'tourcheckpoint',
  userbadge: 'userbadge',
  usercheckpointattempt: 'usercheckpointattempt',
  userprofile: 'userprofile',
  userquizcompletion: 'userquizcompletion',
  userrole: 'userrole',
  users: 'users',
  usertourcompletion: 'usertourcompletion'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
