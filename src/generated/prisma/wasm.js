
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CountryScalarFieldEnum = {
  countryName: 'countryName',
  language: 'language',
  region: 'region'
};

exports.Prisma.RelationLoadStrategy = {
  query: 'query',
  join: 'join'
};

exports.Prisma.CourseScalarFieldEnum = {
  crseCode: 'crseCode',
  crseName: 'crseName',
  offeredBy: 'offeredBy',
  crseFee: 'crseFee',
  labFee: 'labFee'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  deptCode: 'deptCode',
  deptName: 'deptName',
  hod: 'hod',
  noOfStaff: 'noOfStaff',
  maxStaffStrength: 'maxStaffStrength',
  budget: 'budget',
  expenditure: 'expenditure',
  hodApptDate: 'hodApptDate'
};

exports.Prisma.ModuleScalarFieldEnum = {
  modCode: 'modCode',
  modName: 'modName',
  creditUnit: 'creditUnit',
  modCoord: 'modCoord'
};

exports.Prisma.PreRequisiteScalarFieldEnum = {
  modCode: 'modCode',
  requisite: 'requisite'
};

exports.Prisma.StaffScalarFieldEnum = {
  staffNo: 'staffNo',
  staffName: 'staffName',
  supervisorStaffNo: 'supervisorStaffNo',
  dob: 'dob',
  grade: 'grade',
  maritalStatus: 'maritalStatus',
  pay: 'pay',
  allowance: 'allowance',
  hourlyRate: 'hourlyRate',
  gender: 'gender',
  citizenship: 'citizenship',
  joinYr: 'joinYr',
  deptCode: 'deptCode',
  typeOfEmployment: 'typeOfEmployment',
  highestQln: 'highestQln',
  designation: 'designation'
};

exports.Prisma.StaffBackupScalarFieldEnum = {
  staffNo: 'staffNo',
  staffName: 'staffName',
  supervisor: 'supervisor',
  dob: 'dob',
  grade: 'grade',
  maritalStatus: 'maritalStatus',
  pay: 'pay',
  allowance: 'allowance',
  hourlyRate: 'hourlyRate',
  gender: 'gender',
  citizenship: 'citizenship',
  joinYr: 'joinYr',
  deptCode: 'deptCode',
  typeOfEmployment: 'typeOfEmployment',
  highestQln: 'highestQln',
  designation: 'designation'
};

exports.Prisma.StaffDependentScalarFieldEnum = {
  staffNo: 'staffNo',
  dependentName: 'dependentName',
  relationship: 'relationship'
};

exports.Prisma.StudModPerformanceScalarFieldEnum = {
  admNo: 'admNo',
  modRegistered: 'modRegistered',
  mark: 'mark',
  grade: 'grade'
};

exports.Prisma.StudentScalarFieldEnum = {
  admNo: 'admNo',
  studName: 'studName',
  gender: 'gender',
  address: 'address',
  mobilePhone: 'mobilePhone',
  homePhone: 'homePhone',
  dob: 'dob',
  nationality: 'nationality',
  crseCode: 'crseCode'
};

exports.Prisma.UserAccountScalarFieldEnum = {
  id: 'id',
  accountNo: 'accountNo',
  role: 'role',
  password: 'password'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  country: 'country',
  course: 'course',
  department: 'department',
  module: 'module',
  preRequisite: 'preRequisite',
  staff: 'staff',
  staffBackup: 'staffBackup',
  staffDependent: 'staffDependent',
  studModPerformance: 'studModPerformance',
  student: 'student',
  userAccount: 'userAccount',
  userRole: 'userRole'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
